/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Deepcrawl API Root
 */
export type GetApiRootResponse = {
  message: string;
};

/** @internal */
export const GetApiRootResponse$inboundSchema: z.ZodType<
  GetApiRootResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type GetApiRootResponse$Outbound = {
  message: string;
};

/** @internal */
export const GetApiRootResponse$outboundSchema: z.ZodType<
  GetApiRootResponse$Outbound,
  z.ZodTypeDef,
  GetApiRootResponse
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiRootResponse$ {
  /** @deprecated use `GetApiRootResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiRootResponse$inboundSchema;
  /** @deprecated use `GetApiRootResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiRootResponse$outboundSchema;
  /** @deprecated use `GetApiRootResponse$Outbound` instead. */
  export type Outbound = GetApiRootResponse$Outbound;
}

export function getApiRootResponseToJSON(
  getApiRootResponse: GetApiRootResponse,
): string {
  return JSON.stringify(
    GetApiRootResponse$outboundSchema.parse(getApiRootResponse),
  );
}

export function getApiRootResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiRootResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiRootResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiRootResponse' from JSON`,
  );
}
