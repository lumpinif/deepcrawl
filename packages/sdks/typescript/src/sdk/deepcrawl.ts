/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { deepcrawlExtractLinks } from "../funcs/deepcrawlExtractLinks.js";
import { deepcrawlGetApiInfo } from "../funcs/deepcrawlGetApiInfo.js";
import { deepcrawlGetMarkdown } from "../funcs/deepcrawlGetMarkdown.js";
import { deepcrawlReadUrl } from "../funcs/deepcrawlReadUrl.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Deepcrawl extends ClientSDK {
  async getApiInfo(
    options?: RequestOptions,
  ): Promise<operations.GetApiRootResponse> {
    return unwrapAsync(deepcrawlGetApiInfo(
      this,
      options,
    ));
  }

  /**
   * Directly return page markdown content from the request URL.
   */
  async getMarkdown(
    request: operations.GetMarkdownRequest,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(deepcrawlGetMarkdown(
      this,
      request,
      options,
    ));
  }

  /**
   * Returning full result object from the request URL.
   */
  async readUrl(
    request: operations.ReadUrlRequest,
    options?: RequestOptions,
  ): Promise<models.ReadSuccessResponse> {
    return unwrapAsync(deepcrawlReadUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Returning extracted links sitemap results for the request URL.
   */
  async extractLinks(
    request: operations.ExtractLinksPostRequest,
    options?: RequestOptions,
  ): Promise<models.LinksPostSuccessResponse> {
    return unwrapAsync(deepcrawlExtractLinks(
      this,
      request,
      options,
    ));
  }
}
